// Generated module: Event

class Event {
  fn new(mod) {
    return Event { mod };
  }
  /**
   * Like love.event.poll(), but blocks until there is an event in the queue.
   */
  @arguments([])
  fn wait(self) {
    return self.mod.wait();
  }
  /**
   * Clears the event queue.
   */
  @arguments([])
  fn clear(self) {
    return self.mod.clear();
  }
  /**
   * Adds the quit event to the queue.
   * The quit event is a signal for the event handler to close LÃ–VE. It's possible to abort the exit process with the love.quit callback.
   */
  @arguments([("exitstatus", "any")])
  fn quit(self, exitstatus) {
    return self.mod.quit(exitstatus);
  }
  /**
   * Adds an event to the event queue.
   * From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.
   */
  @arguments([("n", "any"), ("a", "any"), ("b", "any"), ("c", "any"), ("d", "any"), ("e", "any"), ("f", "any"), ("...", "any")])
  fn push(self, n, a, b, c, d, e, f) {
    return self.mod.push(n, a, b, c, d, e, f, table.unpack(argv));
  }
  /**
   * Returns an iterator for messages in the event queue.
   */
  @arguments([])
  fn poll(self) {
    return self.mod.poll();
  }
  /**
   * Pump events into the event queue.
   * This is a low-level function, and is usually not called by the user, but by love.run.
   * Note that this does need to be called for any OS to think you're still running,
   * and if you want to handle OS-generated events at all (think callbacks).
   */
  @arguments([])
  fn pump(self) {
    return self.mod.pump();
  }
}

let event = Event.new(love.event);
event.Event = Event;

return event;
