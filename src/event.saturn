// Generated module: Event
use { rtti: { arguments } } in std;

class Event {
  /**
   * Like love.event.poll(), but blocks until there is an event in the queue.
   */
  @arguments()
  fn wait() {
    return love.event.wait();
  }
  /**
   * Returns an iterator for messages in the event queue.
   */
  @arguments()
  fn poll() {
    return love.event.poll();
  }
  /**
   * Pump events into the event queue.
   * This is a low-level function, and is usually not called by the user, but by love.run.
   * Note that this does need to be called for any OS to think you're still running,
   * and if you want to handle OS-generated events at all (think callbacks).
   */
  @arguments()
  fn pump() {
    return love.event.pump();
  }
  /**
   * Clears the event queue.
   */
  @arguments()
  fn clear() {
    return love.event.clear();
  }
  /**
   * Adds the quit event to the queue.
   * The quit event is a signal for the event handler to close LÃ–VE. It's possible to abort the exit process with the love.quit callback.
   */
  @arguments(("exitstatus", "any"))
  fn quit(exitstatus) {
    return love.event.quit(exitstatus);
  }
  /**
   * Adds an event to the event queue.
   * From 0.10.0 onwards, you may pass an arbitrary amount of arguments with this function, though the default callbacks don't ever use more than six.
   */
  @arguments(("n", "any"), ("a", "any"), ("b", "any"), ("c", "any"), ("d", "any"), ("e", "any"), ("f", "any"), ("...", "any"))
  fn push(n, a, b, c, d, e, f, *args) {
    return love.event.push(n, a, b, c, d, e, f, ...args);
  }
}

return Event;
