// Generated module: Sound
use { rtti: { arguments } } in std;

class Sound {
  /**
   * Attempts to find a decoder for the encoded sound data in the specified file.
   */
  @arguments(("file", "any"), ("buffer", "any"))
  fn new_decoder(file, buffer) {
    return love.sound.newDecoder(file, buffer);
  }
  /**
   * Creates new SoundData from a filepath, File, or Decoder. It's also possible to create SoundData with a custom sample rate, channel and bit depth.
   * The sound data will be decoded to the memory in a raw format. It is recommended to create only short sounds like effects, as a 3 minute song uses 30 MB of memory this way.
   */
  @arguments(("filename", "any"))
  fn new_sound_data(filename) {
    return love.sound.newSoundData(filename);
  }
}

return Sound;
