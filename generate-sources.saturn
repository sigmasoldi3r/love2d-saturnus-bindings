#!saturnus
// This script scraps the LÃ¶ve2D API definition
// in order to create and update bindings.
use { Object } in std;

print("Starting API walker...");

class Module {
  fn new(root) {
    return Module { root };
  }
  fn open(self) {
    let last = self.root->gsub(".+/", "");
    let mod_name = last->sub(1, 1)->upper() ++ last->sub(2);
    let full = self.root ++ "/" ++ mod_name;
    return require(full);
  }
}

let MODULES = [
  "audio", "data", "event", "filesystem", "font", "graphics", "image",
  "joystick", "keyboard", "math", "mouse", "physics", "sound", "system",
  "thread", "timer", "touch", "video", "window"
];
class ApiWalker {
  fn new(root) {
    return ApiWalker { root };
  }
  fn list_modules(self) {
    let mods = [];
    for key in pairs(MODULES) {
      let path = MODULES[key];
      mods[#?mods+1] = Module.new(self.root ++ "/modules/" ++ path);
    }
    return mods;
  }
}

class CodeGen {
  fn new() {
    return CodeGen { level: 0, src: "" };
  }
  fn push(self) {
    self.level += 1;
    return self;
  }
  fn pop(self) {
    self.level -= 1;
    return self;
  }
  fn indent(self) {
    return ("  ")->rep(self.level);
  }
  fn line(self, line) {
    self.src = self.src ++ self->indent() ++ line ++ "\n";
    return self;
  }
  fn build(self, info) {
    self
      ->line("// Generated module: " ++ info.name)
      ->line("use { rtti: { arguments } } in std;")
      ->line("")
      ->line("class " ++ info.name ++ " {")
        ->push();
    for (_, func) in Object.entries(info.methods) {
      self
        ->line("/**");
      for str in func.description->gmatch("([^\n]+)") {
        if #?str > 0 {
          self->line(" * " ++ str);
        }
      }
      self
        ->line(" */");
      let args = [];
      if func.variants[1].arguments <> () {
        for (arg_key, _) in Object.entries(func.variants[1].arguments) {
          let arg = func.variants[1].arguments[arg_key];
          args[#?args+1] = arg.name;
        }
      }
      let arg_src = "";
      for (_, arg) in Object.entries(args) {
        arg_src = arg_src ++ ", (\"" ++ arg ++ "\", \"any\")";
      }
      arg_src = arg_src->sub(3);
      self
        ->line("@arguments(" ++ arg_src ++ ")");
      arg_src = "";
      for (_, arg) in Object.entries(args) {
        if arg <> "..." {
          arg_src ++= arg ++ ", ";
        } else {
          arg_src ++= "*args, ";
        }
      }
      arg_src = arg_src->sub(1, -3);
      self
        ->line("fn " ++ func.name ++ "(" ++ arg_src ++ ") {");
      arg_src = "";
      for (_, arg) in Object.entries(args) {
        if arg <> "..." {
          arg_src ++= arg ++ ", ";
        } else {
          arg_src ++= "...args, ";
        }
      }
      arg_src = arg_src->sub(1, -3);
      self
        ->push()
          ->line("return love." ++ info.original_name ++ "." ++ func.original_name ++ "(" ++ arg_src ++ ");")
        ->pop()->line("}");
    }
    self
      ->pop()->line("}")
      ->line("")
      ->line("return " ++ info.name ++ ";");
    return self.src;
  }
}

let api = ApiWalker.new("love-api");
let modules = api->list_modules();
let core = require("love-api/love_api");

fn to_kebab(str) {
  return str->gsub("(%u)", (x) => "_" ++ x->lower());
}

let init = io.open("src/init.saturn", "w");
init->write("// Generated root love bindings\n");

// Generate imports
for k in pairs(modules) {
  let mod = modules[k];
  let data = mod->open();
  print("Loading module " ++ data.name ++ "...");
  let mod_info = {
    name: data.name->sub(1,1)->upper() ++ data.name->sub(2),
    var_name: to_kebab(data.name),
    original_name: data.name,
    methods: {}
  };
  for k in pairs(data.functions) {
    let def = data.functions[k];
    let name = to_kebab(def.name);
    let out = {
      description: def.description,
      name,
      original_name: def.name,
      variants: def.variants
    };
    mod_info.methods[name] = out;
  }
  let builder = CodeGen.new();
  let mod_src = builder->build(mod_info);
  let file = io.open("src/" ++ data.name ++ ".saturn", "w");
  file->write(mod_src);
  file->close();
  init->write("use love2d." ++ data.name ++ ";\n");
}

// Extra import: hook function
init->write("use love2d.hook;\n");

// Generate core module
init->write("\nlet core = {\n");
for key in pairs(core.functions) {
  let func = core.functions[key];
  init->write("  " ++ to_kebab(func.name) ++ ": love." ++ func.name ++ ",\n");
}
init->write("  __entries: " ++ #? core.functions ++ ",\n");
init->write("  love\n");
init->write("};\n");

// Callback code gen
// for key in pairs(core.functions) {
//   let func = core.functions[key];
//   init->write("love." ++ func.name ++ " = core." ++ func.name ++ ";\n");
// }

// Collect modules and return them
init->write("\nreturn {\n");
for k in pairs(modules) {
  let mod = modules[k];
  let data = mod->open();
  print("Exporting module " ++ data.name ++ "...");
  init->write("  " ++ data.name ++ ",\n");
}
init->write("  hook,\n");
init->write("  core\n");
init->write("};\n");
init->close();

// Hooks module
let hook = io.open("src/hook.saturn", "w");
hook->write(
  "// Hook module
fn hook(name, doc) {
  return (target, name) => {
    love[name] = target;
  };
}

return hook;
"
);
hook->close();
